@page "/issue-detail/{id:int}"
@using Doot.Models
@using Doot.Services
@inject IIssueService _issueService;
@inject IBotService _botService;
<div class="custom-flex-row scrollable-content issue-detail">
    @if (_loadException != null)
    {
        throw _loadException;
    }

    @if (_issue == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="issue-detail-box">
            <h2>@_issue.Title</h2>
            <p><strong>ID:</strong> @_issue.Id</p>
            <p><strong>Description:</strong> @_issue.Description</p>
        </div>
        <div class="issue-detail-box">
            @foreach (var message in Messages)
            {
                <p>@message</p>
            }
        </div>
    }
</div>
<input type="text" class="input-box asking-box" placeholder="Ask anything" @bind="InputValue"
    @onkeydown="HandleKeyPress" />

@code {
    public List<string> Messages { get; set; } = new List<string>();
    public string InputValue { get; set; } = string.Empty;
    public int Id { get; set; }

    private KnownIssue? _issue;
    private Exception? _loadException;

    private bool IssyncPage { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id <= 0)
        {
            _loadException = new ArgumentNullException(nameof(Id), "Issue ID cannot be null or empty.");
            return;
        }

        try
        {
            _issue = await _issueService.GetKnownIssuesById(Id);
        }
        catch (Exception ex)
        {
            _loadException = ex;
        }
    }

    // listen to keypress of enter key
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        try
        {
            if (!string.IsNullOrEmpty(InputValue))
            {
                Messages.Add(InputValue);
                InputValue = string.Empty;
                await _botService.GetResponseAsync(Messages);
                await Task.CompletedTask; // Simulate async operation
            }

            // Here you can add logic to process the input, e.g., send it to a service
            await Task.CompletedTask; // Simulate async operation
        }
        finally
        {
            StateHasChanged();
        }

    }



    private async Task StartSyncPage()
    {
        IssyncPage = true;
        while (IssyncPage)
        {
            StateHasChanged(); // Force UI update
                               // Simulate a delay for the sync operation
            await Task.Delay(100);
        }
    }

    private void StopSyncPage()
    {
        IssyncPage = false;
        StateHasChanged(); // Force UI update
    }
}

<style>
    .asking-box {
        position: absolute;
        width: 90%;
        font-size: 20px;
        margin: 20px;
        bottom: 0px;
    }

    .issue-detail-box {
        margin-top: 20px;
    }

    .issue-detail-box h2 {
        margin-bottom: 10px;
    }

    .issue-detail-box p {
        margin: 5px 0;
    }

    .issue-detail {
        padding-bottom: 100px;
    }
</style>