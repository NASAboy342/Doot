@page "/"
@using Doot.Models
@using Doot.Services
@inject IIssueService _issueService;

<ErrorBoundary ErrorContent="ErrorContent">
    <ChildContent>
        @if (_loadException != null)
        {
            throw _loadException;
        }
        <div class="custom-flex-row">
            <div class="custom-h1 what-is-the-issue">What is the Issue?</div>
            <input class="input-box seach-box" type="text" placeholder="Search" />

            @foreach(var issue in knownIssues)
            {
                <div class="selectable-box">
                    <span>@issue.Id</span>
                    <span>@issue.Title</span>
                    <span>@issue.Description</span>
                </div>
            }
        </div>
    </ChildContent>
</ErrorBoundary>

@code {
    private List<KnownIssue> knownIssues = new List<KnownIssue>();
    private Exception? _loadException;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            knownIssues = await _issueService.GetKnownIssues();
        }
        catch (Exception ex)
        {
            _loadException = ex;
        }
    }

    private RenderFragment<Exception> ErrorContent => ex => builder =>
    {
        builder.OpenElement(0, "div");
        builder.AddAttribute(1, "style", "color: red; font-weight: bold; margin: 20px;");
        builder.AddContent(2, $"An error occurred: {ex.Message}");
        builder.CloseElement();
    };
}

<style>
    .what-is-the-issue{
        margin-top: 50px;
        font-size: 40px;
    }

    .seach-box{
        font-size: 20px;
        width: 50%;
        margin-top: 20px;
        background-image: url('/Images/search.png');
        background-repeat: no-repeat;
        background-position: right 10px center;
        background-size: 16px 16px;
        padding-right:40px;
    }
</style>